import{createSlice,createAsyncThunk}from"@reduxjs/toolkit";import{site_url}from"api/constants";import{logOut}from"modules/login/slices/LoginSlice";import{api}from"api";export const getShifts=createAsyncThunk("shifts/getShifts",async({body:body,token:token},thunkAPI)=>{try{const response=await api.post("reactapi/","fetchShifts",body,token);let data=await response.data.datas;return 200===response.status?{status:!0,msg:"Data found",apiRet:data}:thunkAPI.dispatch(logOut({}))}catch(e){console.log(e),thunkAPI.rejectWithValue(e.response.data)}});const initialState={isFetching:!1,shiftsDetails:[]},ShiftsSlice=createSlice({name:"shifts",initialState:initialState,reducers:{ADD_STATE:(state,action)=>{const data=action.payload.data;state[action.payload.slicekey].push(data)},UPDATE_STATE:(state,action)=>{const{slicekey:slicekey,is_idx:is_idx,where:where,objkey:objkey,where_value:where_value}=action.payload;if(is_idx&&isObject(objkey))for(const[key,value]of Object.entries(objkey))state[slicekey][where][key]=value;else{const init_update=state[slicekey].find(init_update=>init_update[where]===where_value);if(init_update&&isObject(objkey))for(const[key,value]of Object.entries(objkey))init_update[key]=value}},FETCH_STATE:(state,action)=>{const{slicekey:slicekey,data:data}=action.payload;state[slicekey]=data},REMOVE_STATE:(state,action)=>{const{slicekey:slicekey,where:where,objkey:objkey,is_idx:is_idx}=action.payload;is_idx?state=state[slicekey].splice(where,1):state[slicekey].map((toRemove,idx)=>{toRemove[objkey]===where&&(state=state[slicekey].splice(idx,1))})},TRUE_FALSE_STATE:(state,action)=>{const{slicekey:slicekey}=action.payload;state[slicekey]=!slicekey},assignState:(state,action)=>{const{slicekey:slicekey,value:value}=action.payload;state[slicekey]=value}},extraReducers:{[getShifts.fulfilled]:(state,{payload:payload})=>{state.isFetching=!1,state.shiftsDetails=payload.apiRet},[getShifts.rejected]:(state,{payload:payload})=>{state.isFetching=!1},[getShifts.pending]:state=>{state.isFetching=!0}}});export const{ADD_STATE:ADD_STATE,UPDATE_STATE:UPDATE_STATE,FETCH_STATE:FETCH_STATE,REMOVE_STATE:REMOVE_STATE}=ShiftsSlice.actions;export default ShiftsSlice.reducer;